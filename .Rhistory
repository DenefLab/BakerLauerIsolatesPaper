plot
plot <- ggplot(data = mpData, mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()
plot
plot <- ggplot(data = mpData, mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(SampleCode))
plot
#### Make a Plot ####
facet_vars <- unique(mpData$SampleCode)
#### Make a Plot ####
facet_vars <- data.frame(unique(mpData$SampleCode))
View(facet_vars)
#### Make a Plot ####
facet_vars <- as.data.frame(unique(mpData$SampleCode))
View(facet_vars)
#### Make a Plot ####
facet_vars <- data.frame(facet_var = unique(mpData$SampleCode))
View(facet_vars)
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(SampleCode == "AC")
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(SampleCode == "AC")
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(SampleCode == "AC")
View(facet_vars)
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(SampleCode == "AC")
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(sample = "AC")
#### Make a Plot ####
facet_vars <- data.frame(facet_vars = unique(mpData$SampleCode))%>%
mutate(SampleCode = "AC")
View(ctrl_data)
View(facet_vars)
ctrl_data <- mpData %>%
filter(SampleCode == "AC")%>%
full_join(., facet_vars)
plot <- mutate(mpData, facet_vars = SampleCode)&>&
ggplot(mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(SampleCode))
plot <- mutate(mpData, facet_vars = SampleCode)&>&
ggplot(mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(facet_vars))
plot <- mutate(mpData, facet_vars = SampleCode)&>&
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(facet_vars))
#### Make a Plot ####
facet_vars <- data.frame(facet_var = unique(mpData$SampleCode))%>%
mutate(SampleCode = "AC")
ctrl_data <- mpData %>%
filter(SampleCode == "AC")%>%
full_join(facet_vars)
plot <- mutate(mpData, facet_var = SampleCode)&>&
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(facet_vars))
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(facet_vars))
plot
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
facet_wrap(vars(facet_var))
plot
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point()+
geom_point(data = ctrl_data)+
facet_wrap(vars(facet_var))
plot
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point(data = ctrl_data)+
geom_point()+
facet_wrap(vars(facet_var))
plot
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point(data = ctrl_data)+
geom_point()+
geom_smooth(data=ctrl_data)+
geom_smooth()+
facet_wrap(vars(facet_var))
plot
source('~/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot/chlorella_pilot_analysis.R', echo=TRUE)
getwd()
setwd("C:/Users/jlaue/OneDrive/Documents/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot")
getwd()
#### Plate Data Processing ####
read_plate <- function(plate_list){
data <- read_csv(plate_list, skip = 1, show_col_types = F)%>%
rename(ChlA_100 = `Mean RFU [ChlA_100:460,685]`,
read_time = `Reading Date/Time`)%>%
mutate(read_time = mdy_hm(read_time),
filename = plate_list)%>%
select(Well, ChlA_100, read_time, filename)
return(data)
}
plate_list <- list.files(path = "./raw_data/",
pattern = "^plate_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_list <- list.files(path = ".",
pattern = "^plate_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_list <- list.files(pattern = "^plate_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_list <- list.files(path = ".",
pattern = "^Plate_(\\d\\d|\\d)_Day_(\\d\\d|\\d).csv"
# pattern = "^plate_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_list <- list.files(path = ".",
pattern = "^Plate_(\\d\\d|\\d)_Day_(\\d\\d|\\d).csv",
# pattern = "^plate_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
source('~/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot/chlorella_pilot_analysis.R', echo=TRUE)
source('~/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot/chlorella_pilot_analysis.R', echo=TRUE)
View(mpData)
#### Combine Data ####
mpData <- full_join(plate_map, plate_data_all)
View(mpData)
#### Stats ####
mpData <- mpData %>%
mutate(exact_sample = paste(SampleCode, Well, sep = "_"))
View(mpData)
mpData$exact_sample
#### Stats ####
mpData <- mpData %>%
mutate(exact_sample = paste(SampleCode, Well, sep = "_"))%>%
split(., .$exact_sample)
library(tidyverse)
library(lubridate)
setwd("C:/Users/jlaue/OneDrive/Documents/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot")
getwd()
#### Plate Data Processing ####
read_plate <- function(plate_list){
data <- read_csv(plate_list, skip = 1, show_col_types = F)%>%
rename(ChlA_100 = `Mean RFU [ChlA_100:460,685]`,
read_time = `Reading Date/Time`)%>%
mutate(read_time = mdy_hm(read_time),
filename = plate_list)%>%
select(Well, ChlA_100, read_time, filename)
return(data)
}
plate_list <- list.files(path = ".",
pattern = "^Plate_(\\d\\d|\\d)_Day_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_data_all <- plate_list %>%
map_df(~read_plate(.))%>%
mutate(begin = min(read_time),
read_interval = begin %--% read_time,
read_timeHours = as.numeric(as.duration((read_interval)/dhours(1))))%>%
select(-begin, -read_interval)
#### Map Data ####
plate_map <- read.csv("./platemap.csv")
#### Combine Data ####
mpData <- full_join(plate_map, plate_data_all)
#### Make a Plot ####
facet_vars <- data.frame(facet_var = unique(mpData$SampleCode))%>%
mutate(SampleCode = "AC")
ctrl_data <- mpData %>%
filter(SampleCode == "AC")%>%
full_join(facet_vars)
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point(data = ctrl_data)+
geom_point()+
geom_smooth(data=ctrl_data)+
geom_smooth()+
facet_wrap(vars(facet_var))
plot
#### Stats ####
mpData_split <- mpData %>%
mutate(exact_sample = paste(SampleCode, Well, sep = "_"))%>%
split(., .$exact_sample)
View(mpData_split)
coefList <- as.list(1:length(mpData_split))
View(coefList)
coefList[[1]]
View(mpData)
mpData$ChlA_100
max(mpData$ChlA_100)
?qlogis
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData))
aPara <- max(mpData_split[[1]]$ChlA_100)
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData_split[[1]]))
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData_split[[1]]))
aPara <- max(mpData_split[[2]]$ChlA_100)
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData_split[[2]]))
mpData_[[1]]
mpData_split[[1]]
aPara <- max(mpData_split[[1]]$ChlA_100)
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData_split[[1]]))
mpData_split[[1]]
aPara <- max(mpData_split[[1]]$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_timeHours, data = mpData_split[[1]]))
?nls
mpData_split[[1]]
mpData_split[[1]]$exact_sample
unique(mpData_split[[1]]$exact_sample)
coefs <- bind_rows(coefList)
View(coefList)
coefList[[1]]
for(i in 1:length(mpData_split)){
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = coef(mod)[1],
int = coef(mod)[2],
gr = coef(mod)[3])
}
mpData_split <- mpData %>%
mutate(exact_sample = paste(SampleCode, Well, sep = "_"))%>%
split(., .$exact_sample)
coefList <- as.list(1:length(mpData_split))
for(i in 1:length(mpData_split)){
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = coef(mod)[1],
int = coef(mod)[2],
gr = coef(mod)[3])
}
coefs <- bind_rows(coefList)
View(coefList)
coefList <- as.list(1:length(mpData_split))
for(i in 1:length(mpData_split)){
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
}
coefList <- as.list(1:length(mpData_split))
for(i in 1:length(mpData_split)){
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
}
library(tidyverse)
library(lubridate)
setwd("C:/Users/jlaue/OneDrive/Documents/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot")
getwd()
#### Plate Data Processing ####
read_plate <- function(plate_list){
data <- read_csv(plate_list, skip = 1, show_col_types = F)%>%
rename(ChlA_100 = `Mean RFU [ChlA_100:460,685]`,
read_time = `Reading Date/Time`)%>%
mutate(read_time = mdy_hm(read_time),
filename = plate_list)%>%
select(Well, ChlA_100, read_time, filename)
return(data)
}
plate_list <- list.files(path = ".",
pattern = "^Plate_(\\d\\d|\\d)_Day_(\\d\\d|\\d).csv",
full.names = TRUE, ignore.case = TRUE)
plate_data_all <- plate_list %>%
map_df(~read_plate(.))%>%
mutate(begin = min(read_time),
read_interval = begin %--% read_time,
read_timeHours = as.numeric(as.duration((read_interval)/dhours(1))))%>%
select(-begin, -read_interval)
#### Map Data ####
plate_map <- read.csv("./platemap.csv")
#### Combine Data ####
mpData <- full_join(plate_map, plate_data_all)
#### Make a Plot ####
facet_vars <- data.frame(facet_var = unique(mpData$SampleCode))%>%
mutate(SampleCode = "AC")
ctrl_data <- mpData %>%
filter(SampleCode == "AC")%>%
full_join(facet_vars)
plot <- mutate(mpData, facet_var = SampleCode)%>%
ggplot(., mapping = aes(x=read_timeHours, ChlA_100, color = SampleCode))+
geom_point(data = ctrl_data)+
geom_point()+
geom_smooth(data=ctrl_data)+
geom_smooth()+
facet_wrap(vars(facet_var))
plot
#### Stats ####
mpData_split <- mpData %>%
mutate(exact_sample = paste(SampleCode, Well, sep = "_"))%>%
split(., .$exact_sample)
coefList <- as.list(1:length(mpData_split))
for(i in 1:length(mpData_split)){
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
}
coefs <- bind_rows(coefList)
for(i in 1:length(mpData_split)){
for(i in 1:length(mpData_split)){
tryCatch({
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
coefs <- bind_rows(coefList)
View(coefList)
coefs <- bind_rows(coefList)
coefList <- as.list(1:length(mpData_split))
for(i in 1:length(mpData_split)){
tryCatch({
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
View(coefList)
df <- mpData_split[[1]]
aPara <- max(df$ChlA_100)+20
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
plot(y ~ iPara*x + xPara)
plot(y = iPara*x + xPara)
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aPara <- max(df$ChlA_100)+10
for(i in 1:length(mpData_split)){
tryCatch({
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+10
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
coefs <- bind_rows(coefList)
for(i in 1:length(mpData_split)){
tryCatch({
df <- mpData_split[[i]]
aPara <- max(df$ChlA_100)+5
parameters <- coef(lm(qlogis(ChlA_100/aPara) ~ read_time, data=df))
iPara <- parameters[[1]]
xPara <- parameters[[2]]
mod <- nls(ChlA_100 ~ A/(1 + exp(-(I + X * read_timeHours))),
start = list(A = aPara, I = iPara, X = xPara),
data = df, trace = T, nls.control(maxiter = 100, warnOnly = T))
aMod <- coef(mod)[1]
iMod <- coef(mod)[2]
xMod <- coef(mod)[3]
coefList[[i]] <- data.frame(exact_sample = unique(df$exact_sample),
cc = aMod,
int = iMod,
gr = xMod)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
source('~/Denef_Lab_Stuff/IsolatesPaper/master.R', echo=TRUE)
source('~/Denef_Lab_Stuff/IsolatesPaper/master.R', echo=TRUE)
source('~/Denef_Lab_Stuff/mf_iw_urop_repo/madelyn_chlorella_pilot/chlorella_pilot_analysis.R', echo=TRUE)
isolateTax <- otuTable %>%
mutate(readType = ifelse(totalReads == 1, "sanger", "miseq"),
contamFlag = ifelse(count <= 0.05*totalReads, T, F))%>%
## This filter pulls out only sample data (removes control, background, and pond OTUs)
filter(contamFlag == F, str_detect(.$Isolate, "^[:digit:]|^S|^_"))%>%
# distinct()%>% ## not needed
group_by(Isolate)%>%
mutate(numOTUs = n(),
mixed = ifelse(numOTUs > 1, T, F),
Isolate = str_replace(Isolate, "(?<=\\d)sep(?=\\d)", ","),
Isolate = str_replace(Isolate, "sep", ""))%>%
# ,
# ## This ifelse() removes "_" from the beginning of some sample names
#          Isolate = ifelse(str_detect(Isolate, "^_") == T,
#                           str_extract(Isolate, "(\\d+)(_|)D."),
# ## some samples used a different naming convention ("S" means "DF")
# ## This ifelse() changes these sample names to be uniform
#                           ifelse(str_detect(Isolate, "^S") == T,
#                                  paste(str_extract(Isolate, "(\\d+)"),
#                                        "DF", sep = ""), Isolate)),
# ## This ifelse removes mothur naming syntax and reverts Isolate names back to coculture naming conventions (removes underscores mainly)
#          Isolate = ifelse(str_detect(Isolate, "\\d_D") == T,
#                           str_replace(Isolate, "_", ""),
#                           ifelse(str_detect(Isolate, "\\d_\\d") == T,
#                                  str_replace(Isolate, "_", ","), Isolate)))%>%
left_join(., taxTable)
source('~/Denef_Lab_Stuff/IsolatesPaper/master.R', echo=TRUE)
View(isolateTax)
isolateTax <- otuTable %>%
mutate(readType = ifelse(totalReads == 1, "sanger", "miseq"),
contamFlag = ifelse(count <= 0.05*totalReads, T, F))%>%
## This filter pulls out only sample data (removes control, background, and pond OTUs)
filter(contamFlag == F, str_detect(.$Isolate, "^[:digit:]|^S|^_"))%>%
# distinct()%>% ## not needed
group_by(Isolate)%>%
mutate(numOTUs = n(),
mixed = ifelse(numOTUs > 1, T, F),
Isolate = str_replace(Isolate, "(?<=\\d)sep(?=\\d)", ","),
Isolate = str_replace(Isolate, "sep", ""),
Isolate = str_replace(Isolate, "_", ""))%>%
# ,
# ## This ifelse() removes "_" from the beginning of some sample names
#          Isolate = ifelse(str_detect(Isolate, "^_") == T,
#                           str_extract(Isolate, "(\\d+)(_|)D."),
# ## some samples used a different naming convention ("S" means "DF")
# ## This ifelse() changes these sample names to be uniform
#                           ifelse(str_detect(Isolate, "^S") == T,
#                                  paste(str_extract(Isolate, "(\\d+)"),
#                                        "DF", sep = ""), Isolate)),
# ## This ifelse removes mothur naming syntax and reverts Isolate names back to coculture naming conventions (removes underscores mainly)
#          Isolate = ifelse(str_detect(Isolate, "\\d_D") == T,
#                           str_replace(Isolate, "_", ""),
#                           ifelse(str_detect(Isolate, "\\d_\\d") == T,
#                                  str_replace(Isolate, "_", ","), Isolate)))%>%
left_join(., taxTable)
View(isolateTax)
View(isolateTax)
View(isolateTax)
SM_duplicates <- isolateTax %>% select(Isolate, readType)
SM_duplicates <- isolateTax %>% select(Isolate, readType)%>%distinct()
SM_duplicates <- isolateTax %>%
select(Isolate, readType)%>%
distinct()%>%
group_by(Isolate)%>%
filter(n() == 2)
View(SM_duplicates)
SM_duplicates <- isolateTax %>%
select(Isolate, readType)%>%
distinct()%>%
group_by(Isolate)%>%
filter(n() == 2)%>%
left_join(., isolateTax)
View(SM_duplicates)
